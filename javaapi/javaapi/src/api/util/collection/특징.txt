1. List계열

1) Stack
=> Last In, First Out(LIFO)
=> 나중에 들어간건 먼저 나온다.
=> push() 삽입, pop() 삭제

2) ArraysList(*)
=> 배열 기반의 리스트
=> 가장 평범하게 많이 사용 됨.
=> 인덱스(순서 o), 값의 중복(o)

3) LinkedList
=> 노드(객체) 기반의 연결 리스트
=> 다음 노드의 주소값을 기록해서, 사슬처럼 연결해 놓은 구조
=> ArrayList와 사용방법은 똑같음
=> ArrayList보다 삽입, 삭제는 유리하고, 조회는 느림
=> Queue인터페스이를 구현하

2. Queue 계열
1) Queue
=> First In First Out (FIFO)
=> 컴퓨터의 운영체제 스케쥴링, 다양한 프로그래밍에서도 사용됨.
=> 자바에서는 LinkedList를 Queue에 저장하면 Queue처럼 사용할 수 있습니다.
=> Queue의 일반적인 종류로는
일반Queue - LinkedList
양방향큐 - Dequeue
우선순위큐 - PriorityQueue

2) Deque
=> 양방향 큐 (양측에서 추가 삭제가 가능한 구조)
=> 자바에서는 ArrayDeque클래스로 사용합니다.
=> Deque인터페이스를 상속 받습니다.

3) PriorityQueue
=> 값을 넣으면, 자동으로 정려루 되는 형태
=> 문자열, 숫자같은 경우는 저동 정렬되서 들어감
=> 사용자 객체를 쓰게 되면, 정렬의 방식을 반드시 구현해야 사용할 수 있습니다.

3. Set계열
=> 데이터를 중복없이 저장하는 자료구조
=> 해시알고리즘을 사용해서 저장 순서를 알 수가 없음
=> 값의 저장 순서를 알 수 없어서 get()이 없음.
=> 값의 확인 iterator라는 반복자로 확인해야함.
=> HashSet - 기본 Set클래스
=> TreeSet - 기본 Set클래스 + 정렬
=> LinkedHashSet - 기본 Set클래스 + 순서를 가지고 있는

4. Map계열
=> key, value를 한번에 저장하는 형태의 자료구조
=> 객체 생성시, 멀티제네렉<key, value>에 대한 타입을 동시에 저장해야함.
=> key를 알고 있으면, 값을 빠르게 찾아주는 특징을 가짐. 0(1)
=> key를 저장하는 방식이 hash개념을 사용해서 저장함.
=> 프로그램에서 많이 사용됨. put(), get()
=> HashMap<> - 키가 HashSet으로 저장되는 형태
=> TreeMap<> - 키가 TreeSet으로 저장되는 형태(키가 정렬됨)
=> LinkedHashMap<> - 키가 LinkedHashSet으로 저장되는 형태